import unittest
from assignment2 import maxThroughput

__author__ = "Chang Yee Vern"

class Testq1(unittest.TestCase):
    def test_example1(self):
        connections = [(0, 1, 3000), (1, 2, 2000), (1, 3, 1000), (0, 3, 2000), (3, 4, 2000), (3, 2, 1000)]
        maxIn = [5000, 3000, 3000, 3000, 2000]
        maxOut = [5000, 3000, 3000, 2500, 1500]
        origin = 0
        targets = [4, 2]
        expected = 4500
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), expected)
        
    def test_example2(self):
        connections = [(0, 1, 3000), (1, 2, 2000), (1, 3, 1000), (0, 3, 2000), (3, 4, 2000), (3, 2, 1000)]
        maxIn = [5000, 3000, 3000, 3000, 2000]
        maxOut = [5000, 3000, 3000, 2500, 1500]
        origin = 0
        targets = [2, 3]
        expected = 5000
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), expected)
    
    def test_example3(self):
        connections = [(0, 1, 1000), (0, 2, 2000), (1, 2, 500), (1, 3, 1500), (2, 3, 1000), (2, 4, 2000)]
        maxIn = [2000, 3000, 2500, 1500, 2000]
        maxOut = [2000, 2500, 3000, 2000, 2500]
        origin = 0
        targets = [3, 4]
        expected = 2000
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), expected)
    
    def test_example4(self):
        connections = [(0, 1, 3000), (1, 2, 2000), (1, 3, 1000), (0, 3, 2000), (3, 4, 2000), (3, 2, 1000)]
        maxIn = [5000, 3000, 3000, 3000, 2000]
        maxOut = [5000, 3000, 3000, 2500, 1500]
        origin = 1
        targets = [3]
        expected = 1000
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), expected)

    def test_example5(self):
        connections = [(0, 1, 5000), (1, 2, 3000), (1, 3, 2000), (0, 3, 4000), (3, 4, 2000), (3, 2, 1000)]
        maxIn = [10000, 5000, 5000, 5000, 3000]
        maxOut = [10000, 5000, 5000, 4000, 2000]
        origin = 0
        targets = [4, 2]
        expected = 6000
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), expected)

    def test_example6(self):
        connections = [(0, 1, 5000), (1, 2, 3000), (1, 3, 2000), (0, 3, 4000), (3, 4, 2000), (3, 2, 1000)]
        maxIn = [10000, 5000, 5000, 5000, 3000]
        maxOut = [10000, 5000, 5000, 4000, 2000]
        origin = 0
        targets = [2, 3]
        expected = 8000
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), expected)

    def test_example7(self):
        connections = [(0, 1, 3000), (1, 2, 2000), (1, 3, 1000), (0, 3, 2000), (3, 4, 2000), (3, 2, 1000),
                       (4, 5, 1500), (5, 6, 2500), (6, 7, 3000), (7, 8, 4000), (8, 9, 2000)]
        maxIn = [5000, 3000, 3000, 3000, 2000, 2500, 2000, 3500, 3000, 4000]
        maxOut = [5000, 3000, 3000, 2500, 1500, 2000, 3000, 2500, 3500, 4000]
        origin = 0
        targets = [9, 5, 7]
        expected = 1500
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), expected)

    def test_example8(self):
        connections = [(0, 1, 2000), (1, 2, 3000), (2, 3, 4000), (3, 4, 5000), (4, 5, 6000), (5, 6, 7000),
                       (6, 7, 8000), (7, 8, 9000), (8, 9, 10000), (9, 10, 2000), (10, 11, 3000)]
        maxIn = [10000, 9000, 8000, 7000, 6000, 5000, 4000, 3000, 2000, 1000, 5000, 3000]
        maxOut = [10000, 9000, 8000, 7000, 6000, 5000, 4000, 3000, 2000, 1000, 5000, 3000]
        origin = 1
        targets = [10, 7, 4, 2]
        expected = 3000
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), expected)
    
    def test_example9(self):
        connections = [(0, 1, 4070), (0, 2, 3013), (0, 3, 4992), (0, 4, 3559), (1, 2, 4700), (1, 3, 3655), 
                       (1, 4, 1326), (2, 3, 1603), (2, 4, 4606), (3, 4, 4389)]
        maxIn = [2708, 8532, 7074, 2802, 2570]
        maxOut = [4662, 3749, 9258, 1695, 7671]
        origin = 1
        targets = [3, 2]
        expected = 3749
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), expected)

    def test_example10(self):
        connections = [(0, 1, 1961), (0, 2, 3341), (0, 3, 878), (0, 4, 4693), (1, 2, 4047), (1, 3, 1573), 
                       (1, 4, 4860), (2, 3, 3125), (2, 4, 1708), (3, 4, 3993)]
        maxIn = [9131, 8152, 9986, 7011, 2187]
        maxOut = [6447, 4143, 4536, 6204, 3413]
        origin = 2
        targets = [4, 0, 3, 1]
        expected = 4536
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), expected)

    def test_example11(self):
        connections = [(0, 1, 2989), (0, 2, 1029), (0, 3, 4270), (0, 4, 1326), (1, 2, 4541), (1, 3, 2912), 
                       (1, 4, 2221), (2, 3, 3990), (2, 4, 4002), (3, 4, 3841)]
        maxIn = [1934, 2094, 4652, 4874, 6543]
        maxOut = [2515, 1396, 5645, 6497, 8401]
        origin = 2
        targets = [0, 4, 3, 1]
        expected = 5645
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), expected)
    
    def test_example12(self):
        connections = [(0, 1, 4166), (0, 2, 2824), (0, 3, 2185), (0, 4, 600), (0, 5, 1278), (0, 6, 1597), 
                       (0, 7, 3702), (0, 8, 2105), (0, 9, 913), (0, 10, 3387), (0, 11, 3925), (0, 12, 3063), 
                       (0, 13, 3854), (0, 14, 3525), (0, 15, 3283), (0, 16, 761), (0, 17, 2994), (0, 18, 3887), 
                       (0, 19, 2500), (1, 2, 4794), (1, 3, 4406), (1, 4, 4113), (1, 5, 1080), (1, 6, 4388), 
                       (1, 7, 1750), (1, 8, 1773), (1, 9, 2579), (1, 10, 665), (1, 11, 2470), (1, 12, 3645), 
                       (1, 13, 2626), (1, 14, 3640), (1, 15, 3992), (1, 16, 1941), (1, 17, 4946), (1, 18, 4250), 
                       (1, 19, 3618), (2, 3, 2626), (2, 4, 2762), (2, 5, 2898), (2, 6, 1067), (2, 7, 3163), 
                       (2, 8, 1150), (2, 9, 3499), (2, 10, 3307), (2, 11, 652), (2, 12, 3865), (2, 13, 1415), 
                       (2, 14, 1091), (2, 15, 2722), (2, 16, 1394), (2, 17, 2983), (2, 18, 4431), (2, 19, 3362), 
                       (3, 4, 3047), (3, 5, 1084), (3, 6, 2674), (3, 7, 1199), (3, 8, 4330), (3, 9, 1201), 
                       (3, 10, 1802), (3, 11, 3622), (3, 12, 3282), (3, 13, 4593), (3, 14, 4106), (3, 15, 4730), 
                       (3, 16, 2892), (3, 17, 2975), (3, 18, 2934), (3, 19, 4140), (4, 5, 4598), (4, 6, 2998), 
                       (4, 7, 1152), (4, 8, 4289), (4, 9, 4405), (4, 10, 850), (4, 11, 2973), (4, 12, 3438), 
                       (4, 13, 1515), (4, 14, 4967), (4, 15, 1595), (4, 16, 3421), (4, 17, 4475), (4, 18, 4804), 
                       (4, 19, 836), (5, 6, 4559), (5, 7, 2845), (5, 8, 2667), (5, 9, 1171), (5, 10, 4425), 
                       (5, 11, 764), (5, 12, 4632), (5, 13, 4553), (5, 14, 709), (5, 15, 1216), (5, 16, 3223), 
                       (5, 17, 3544), (5, 18, 3337), (5, 19, 678), (6, 7, 1205), (6, 8, 607), (6, 9, 3687), 
                       (6, 10, 2587), (6, 11, 712), (6, 12, 4588), (6, 13, 2311), (6, 14, 4195), (6, 15, 559),
                       (6, 16, 2946), (6, 17, 3766), (6, 18, 4995), (6, 19, 2750), (7, 8, 2006), (7, 9, 2600), 
                       (7, 10, 2065), (7, 11, 4511), (7, 12, 3938), (7, 13, 2885), (7, 14, 4166), (7, 15, 2334), 
                       (7, 16, 4028), (7, 17, 4251), (7, 18, 888), (7, 19, 3895), (8, 9, 3757), (8, 10, 3906), 
                       (8, 11, 3495), (8, 12, 1251), (8, 13, 1622), (8, 14, 1003), (8, 15, 2003), (8, 16, 1606), 
                       (8, 17, 2521), (8, 18, 4463), (8, 19, 3301), (9, 10, 987), (9, 11, 1408), (9, 12, 3168), 
                       (9, 13, 2420), (9, 14, 2859), (9, 15, 4510), (9, 16, 966), (9, 17, 1344), (9, 18, 714), 
                       (9, 19, 4048), (10, 11, 3066), (10, 12, 2730), (10, 13, 1584), (10, 14, 2517), (10, 15, 1892), 
                       (10, 16, 3736), (10, 17, 3327), (10, 18, 3307), (10, 19, 3127), (11, 12, 3349), (11, 13, 859), 
                       (11, 14, 2730), (11, 15, 3700), (11, 16, 1747), (11, 17, 3867), (11, 18, 1950), (11, 19, 1917), 
                       (12, 13, 3902), (12, 14, 2448), (12, 15, 3198), (12, 16, 3426), (12, 17, 4247), (12, 18, 2222), 
                       (12, 19, 764), (13, 14, 4986), (13, 15, 1910), (13, 16, 3062), (13, 17, 3275), (13, 18, 3057), 
                       (13, 19, 4387), (14, 15, 2207), (14, 16, 1141), (14, 17, 1869), (14, 18, 1520), (14, 19, 2630), 
                       (15, 16, 1304), (15, 17, 4561), (15, 18, 3366), (15, 19, 2089), (16, 17, 2236), (16, 18, 2264), 
                       (16, 19, 2006), (17, 18, 654), (17, 19, 1986), (18, 19, 876)]
        maxIn = [6579, 8280, 9539, 8210, 4463, 2556, 1118, 8624, 5694, 1386, 1867, 5812, 1988, 9822, 5745, 6299, 4419, 9510, 6024, 4179]
        maxOut = [2469, 2370, 5615, 5522, 7935, 2310, 3286, 3241, 3676, 3486, 6410, 2072, 5706, 9937, 8084, 1165, 6908, 6173, 5425, 5445]
        origin = 6
        targets = [9, 14, 15, 4, 13, 1, 12, 11, 17, 0, 16, 3, 19, 7, 18, 8, 2]
        expected = 3286
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), expected)


    def test_example15(self):
        connections = [(0, 1, 35038), (0, 2, 20212), (0, 5, 36273), (0, 6, 49315), (0, 7, 37415), (0, 8, 6389), (0, 9, 15681), (0, 10, 6536), (0, 12, 31327), (0, 13, 10802), (0, 15, 1369), (0, 17, 12149), (0, 20, 45313), (0, 22, 31683), (0, 23, 4504), (0, 24, 41674), (0, 27, 6348), (0, 29, 49043), (0, 32, 43847), (0, 33, 31890), (0, 34, 5859), (0, 35, 9274), (0, 39, 14231), (0, 41, 39959), (0, 42, 37232), (0, 43, 29087), (0, 44, 33259), (0, 46, 23078), (0, 48, 4010), (0, 49, 39784), (1, 2, 10548), (1, 11, 10970), (1, 13, 21517), (1, 14, 12356), (1, 15, 45314), (1, 17, 41534), (1, 21, 34479), (1, 23, 3377), (1, 24, 21422), (1, 25, 20215), (1, 26, 1134), (1, 27, 18397), (1, 29, 29505), (1, 31, 46879), (1, 33, 5112), (1, 34, 16113), (1, 40, 6766), (1, 41, 33774), (1, 45, 25187), (1, 48, 44792), (2, 4, 13037), (2, 5, 49683), (2, 6, 31939), (2, 8, 30106), (2, 9, 35045), (2, 10, 7930), (2, 13, 22283), (2, 17, 10076), (2, 18, 35863), (2, 21, 18426), (2, 22, 42546), (2, 27, 4295), (2, 28, 34495), (2, 29, 19657), (2, 30, 31543), (2, 31, 40592), (2, 33, 39155), (2, 34, 32533), (2, 37, 36570), (2, 38, 37320), (2, 41, 31858), (2, 44, 15321), (2, 45, 40413), (2, 46, 30736), (2, 48, 5076), (3, 4, 39465), (3, 5, 41149), (3, 7, 21756), (3, 8, 26703), (3, 9, 16557), (3, 11, 41183), (3, 12, 15173), (3, 15, 2104), (3, 19, 41235), (3, 20, 3598), (3, 24, 28176), (3, 25, 10222), (3, 27, 1000), (3, 28, 12108), (3, 29, 48691), (3, 30, 11733), (3, 31, 34326), (3, 33, 41050), (3, 34, 5060), (3, 35, 6997), (3, 37, 33441), (3, 44, 39411), (3, 46, 17996), (3, 47, 47748), (3, 48, 26858), (3, 49, 17032), (4, 6, 34575), (4, 9, 11138), (4, 10, 46215), (4, 11, 48011), (4, 13, 14121), (4, 14, 16772), (4, 15, 35062), (4, 17, 6480), (4, 19, 16580), (4, 22, 3431), (4, 25, 42982), (4, 27, 28162), (4, 28, 9976), (4, 31, 5951), (4, 32, 46186), (4, 37, 39034), (4, 38, 860), (4, 42, 2337), (4, 43, 26465), (4, 44, 1805), (4, 45, 42855), (4, 47, 44844), (4, 48, 45558), (4, 49, 26811), (5, 9, 16472), (5, 10, 21017), (5, 11, 34207), (5, 12, 38225), (5, 14, 45500), (5, 17, 30574), (5, 18, 40165), (5, 21, 42035), (5, 22, 45057), (5, 24, 40401), (5, 27, 33669), (5, 29, 35667), (5, 30, 30552), (5, 31, 15885), (5, 33, 12854), (5, 34, 25514), (5, 38, 8715), (5, 41, 1676), (5, 42, 34390), (5, 43, 4318), (5, 45, 23589), (5, 47, 2150), (6, 8, 47030), (6, 10, 15311), (6, 13, 1875), (6, 14, 8700), (6, 18, 10643), (6, 20, 11979), (6, 24, 37702), (6, 27, 13483), (6, 28, 19326), (6, 29, 37678), (6, 34, 2850), (6, 36, 11752), (6, 37, 48342), (6, 41, 23017), (6, 42, 30356), (6, 43, 26495), (6, 44, 33003), (6, 49, 39317), (7, 10, 30523), (7, 11, 13428), (7, 13, 18603), (7, 14, 17289), (7, 15, 5185), (7, 19, 25823), (7, 20, 19629), (7, 23, 2412), (7, 26, 9201), (7, 27, 13848), (7, 30, 6633), (7, 31, 24487), (7, 33, 20822), (7, 34, 37964), (7, 37, 39429), (7, 41, 48969), (7, 42, 43017), (7, 45, 31625), (7, 46, 16740), (8, 9, 49745), (8, 12, 44344), (8, 13, 515), (8, 14, 17595), (8, 16, 9803), (8, 22, 11153), (8, 24, 24017), (8, 26, 34047), (8, 28, 40220), (8, 29, 14986), (8, 30, 22982), (8, 31, 44112), (8, 36, 44749), (8, 37, 46914), (8, 38, 4444), (8, 40, 40688), (8, 43, 27065), (8, 45, 37661), (8, 47, 39347), (8, 48, 35290), (9, 11, 7412), (9, 14, 44322), (9, 16, 10347), (9, 17, 19516), (9, 21, 42490), (9, 22, 28598), (9, 24, 46455), (9, 26, 11450), (9, 29, 8685), (9, 30, 46395), (9, 35, 12763), (9, 37, 13159), (9, 43, 28914), (9, 44, 14890), (9, 45, 4879), (9, 48, 15572), (10, 11, 2294), (10, 12, 10756), (10, 16, 9003), (10, 20, 28771), (10, 25, 31372), (10, 26, 22973), (10, 28, 12590), (10, 31, 30045), (10, 32, 20678), (10, 33, 35780), (10, 34, 19403), (10, 36, 17306), (10, 37, 7080), (10, 39, 33388), (10, 40, 4470), (10, 44, 44649), (10, 46, 1805), (10, 48, 36057), (11, 14, 13406), (11, 17, 47349), (11, 18, 32722), (11, 20, 17032), (11, 24, 12711), (11, 25, 16360), (11, 26, 38593), (11, 29, 10451), (11, 30, 37981), (11, 34, 22014), (11, 40, 49908), (11, 43, 35570), (11, 46, 40071), (11, 48, 35229), (12, 13, 46113), (12, 14, 18663), (12, 16, 10484), (12, 17, 2040), (12, 19, 10318), (12, 20, 19309), (12, 23, 4506), (12, 25, 28023), (12, 27, 22169), (12, 28, 18979), (12, 29, 21013), (12, 30, 27835), (12, 31, 27530), (12, 33, 24711), (12, 34, 26273), (12, 36, 32029), (12, 40, 23735), (12, 44, 911), (12, 45, 42618), (12, 47, 12162), (12, 48, 44498), (13, 15, 17275), (13, 18, 48120), (13, 20, 28879), (13, 21, 23842), (13, 22, 34961), (13, 28, 3055), (13, 30, 13726), (13, 34, 28902), (13, 36, 40177), (13, 37, 19613), (13, 40, 509), (13, 41, 36810), (13, 42, 14573), (13, 43, 47414), (13, 45, 37102), (14, 16, 9788), (14, 17, 16745), (14, 20, 20591), (14, 21, 35446), (14, 23, 38923), (14, 24, 7855), (14, 25, 12596), (14, 27, 34920), (14, 30, 3299), (14, 31, 8175), (14, 36, 17237), (14, 37, 35106), (14, 41, 42228), (14, 42, 27354), (14, 45, 43329), (14, 46, 24622), (14, 47, 10179), (14, 48, 37356), (15, 16, 8997), (15, 17, 4974), (15, 18, 9498), (15, 23, 40380), (15, 24, 31365), (15, 25, 49088), (15, 28, 28253), (15, 32, 6094), (15, 34, 2710), (15, 36, 24988), (15, 37, 34179), (15, 38, 31845), (15, 39, 25027), (15, 40, 15971), (15, 42, 17114), (15, 47, 28353), (15, 49, 15376), (16, 17, 21542), (16, 18, 23379), (16, 19, 44908), (16, 20, 3123), (16, 23, 33723), (16, 24, 18501), (16, 27, 39171), (16, 28, 9649), (16, 30, 4998), (16, 32, 46373), (16, 40, 12555), (16, 41, 9078), (16, 45, 3515), (16, 46, 43791), (16, 47, 5184), (16, 48, 35693), (16, 49, 6975), (17, 18, 37629), (17, 19, 9671), (17, 20, 32254), (17, 21, 29468), (17, 22, 1031), (17, 24, 43488), (17, 25, 2302), (17, 26, 29599), (17, 27, 29604), (17, 28, 30128), (17, 32, 5035), (17, 35, 41850), (17, 36, 14403), (17, 41, 41352), (17, 42, 4062), (17, 46, 43295), (17, 48, 45966), (17, 49, 19895), (18, 19, 42916), (18, 21, 18987), (18, 25, 11745), (18, 26, 27998), (18, 27, 10002), (18, 33, 14795), (18, 34, 39336), (18, 36, 14681), (18, 38, 18118), (18, 40, 24069), (18, 41, 17216), (18, 43, 40487), (18, 44, 34799), (18, 46, 26467), (18, 47, 45481), (18, 48, 14794), (18, 49, 13756), (19, 21, 41942), (19, 25, 18966), (19, 26, 47413), (19, 27, 38151), (19, 29, 20231), (19, 30, 49675), (19, 31, 17765), (19, 33, 27147), (19, 35, 31559), (19, 36, 20687), (19, 40, 5188), (19, 42, 46121), (19, 43, 34481), (19, 45, 6838), (19, 46, 26585), (19, 48, 48966), (19, 49, 34186), (20, 22, 10747), (20, 25, 4996), (20, 26, 3442), (20, 28, 39924), (20, 33, 21979), (20, 34, 28800), (20, 35, 22748), (20, 40, 19625), (20, 44, 21529), (20, 46, 749), (20, 47, 24751), (20, 48, 30602), (20, 49, 29895), (21, 23, 20827), (21, 24, 36056), (21, 29, 43577), (21, 31, 1573), (21, 32, 43768), (21, 33, 27881), (21, 37, 28790), (21, 38, 42409), (21, 39, 21384), (21, 41, 37997), (21, 42, 7365), (21, 43, 9913), (21, 44, 6181), (21, 47, 19154), (21, 49, 16229), (22, 27, 7169), (22, 29, 6955), (22, 30, 14006), (22, 32, 10061), (22, 33, 44653), (22, 34, 19830), (22, 37, 23991), (22, 39, 23900), (22, 40, 9639), (22, 42, 5945), (22, 44, 25385), (22, 46, 2331), (22, 47, 974), (22, 49, 28546), (23, 25, 32976), (23, 36, 12523), (23, 40, 9559), (23, 42, 12208), (23, 44, 24386), (23, 48, 42260), (24, 25, 25249), (24, 27, 48111), (24, 31, 42655), (24, 33, 45130), (24, 36, 20920), (24, 38, 30619), (24, 43, 2770), (24, 45, 2308), (24, 46, 36324), (24, 47, 31217), (24, 48, 16572), (24, 49, 2105), (25, 26, 41111), (25, 27, 720), (25, 28, 4338), (25, 29, 44785), (25, 32, 5660), (25, 38, 33153), (25, 39, 36350), (25, 41, 44397), (25, 44, 17755), (25, 46, 38276), (25, 49, 37039), (26, 27, 40996), (26, 28, 15831), (26, 31, 46211), (26, 33, 35732), (26, 34, 18029), (26, 37, 13285), (26, 39, 6307), (26, 40, 25934), (26, 41, 42352), (26, 43, 25953), (26, 48, 42591), (27, 29, 5979), (27, 30, 45599), (27, 31, 25587), (27, 38, 4427), (27, 39, 15484), (27, 42, 18877), (27, 44, 3821), (27, 45, 41623), (27, 47, 27784), (27, 48, 33295), (28, 30, 37648), (28, 33, 47230), (28, 34, 46160), (28, 36, 31160), (28, 37, 9083), (28, 38, 30676), (28, 41, 27683), (28, 42, 4897), (28, 45, 4309), (28, 46, 21545), (28, 47, 9720), (28, 48, 46565), (29, 30, 40452), (29, 31, 37672), (29, 33, 30881), (29, 36, 42358), (29, 37, 25939), (29, 40, 29405), (29, 43, 21888), (29, 47, 13523), (29, 49, 11903), (30, 32, 33896), (30, 34, 23780), (30, 35, 16762), (30, 37, 3281), (30, 39, 25056), (30, 41, 45640), (30, 47, 45695), (30, 48, 47050), (31, 33, 35066), (31, 34, 49306), (31, 35, 19222), (31, 36, 27698), (31, 38, 32955), (31, 39, 5915), (31, 40, 2101), (32, 34, 37303), (32, 35, 24122), (32, 36, 47904), (32, 37, 29288), (32, 38, 34924), (32, 39, 26982), (32, 40, 46601), (32, 42, 29067), (32, 44, 41904), (32, 45, 27899), (32, 47, 38267), (32, 48, 33098), (33, 34, 27723), (33, 35, 28121), (33, 36, 33006), (33, 37, 6124), (33, 39, 10955), (33, 40, 28716), (33, 42, 43058), (33, 45, 35028), (33, 46, 35885), (33, 48, 34205), (34, 36, 3530), (34, 38, 5274), (34, 39, 20520), (34, 43, 45961), (34, 44, 2660), (34, 46, 9297), (34, 47, 20476), (34, 48, 19660), (35, 37, 42490), (35, 41, 48432), (35, 46, 40541), (35, 47, 1101), (36, 37, 44333), (36, 38, 47110), (36, 39, 31375), (36, 41, 17884), (36, 43, 45233), (36, 46, 6674), (36, 47, 7266), (37, 39, 15118), (37, 40, 32551), (37, 43, 2259), (37, 45, 7446), (37, 46, 39321), (37, 48, 32367), (38, 40, 43171), (38, 41, 5213), (38, 42, 45243), (38, 45, 35969), (38, 46, 9880), (39, 40, 843), (39, 42, 45872), (39, 43, 15045), (39, 44, 6238), (39, 45, 40776), (39, 46, 17196), (39, 47, 27408), (40, 41, 19797), (40, 42, 3390), (40, 43, 6770), (40, 44, 11249), (40, 47, 712), (40, 49, 35710), (41, 43, 37287), (41, 44, 25788), (41, 45, 41363), (41, 46, 28654), (41, 49, 32161), (42, 44, 2966), (42, 47, 29676), (42, 48, 46604), (43, 45, 7680), (43, 47, 46694), (43, 48, 38129), (43, 49, 12751), (44, 45, 23064), (44, 47, 10927), (44, 48, 35938), (44, 49, 5102), (45, 48, 1164), (45, 49, 6941), (46, 47, 49233), (46, 49, 8286), (48, 49, 42553)]
        maxIn = [48070, 23714, 29876, 48403, 18920, 46730, 35342, 18988, 4280, 7736, 46827, 40899, 41814, 13458, 4563, 38672, 1079, 8122, 13250, 4329, 13329, 545, 15933, 36384, 47989, 34742, 40890, 47897, 7950, 24596, 5976, 40514, 36622, 37376, 49124, 31938, 34705, 17350, 2504, 19569, 21021, 36569, 29111, 8264, 3265, 35404, 7721, 21243, 29213, 18835]
        maxOut = [8177, 20045, 6507, 4865, 1173, 44278, 2175, 29321, 28095, 15518, 5562, 10553, 10303, 15668, 7451, 43198, 10200, 37535, 45857, 1925, 47237, 31051, 32425, 25019, 17990, 20522, 5986, 21490, 39315, 4471, 33682, 9728, 43893, 25153, 3756, 15633, 2958, 13334, 28693, 30237, 9302, 40209, 14112, 44924, 35668, 23298, 1838, 19793, 32200, 32963]
        origin = 35
        targets = [18, 21, 36, 43, 42, 28, 49, 1, 38, 16, 40, 15]
        expected = 15633
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), expected)


if __name__ == '__main__':
    unittest.main()